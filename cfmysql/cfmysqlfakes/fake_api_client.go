// This file was generated by counterfeiter
package cfmysqlfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin"
	. "code.cloudfoundry.org/cli/plugin/models"
	"github.com/andreasf/cf-mysql-plugin/cfmysql"
)

type FakeApiClient struct {
	GetStartedAppsStub        func(cliConnection plugin.CliConnection) ([]GetAppsModel, error)
	getStartedAppsMutex       sync.RWMutex
	getStartedAppsArgsForCall []struct {
		cliConnection plugin.CliConnection
	}
	getStartedAppsReturns struct {
		result1 []GetAppsModel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApiClient) GetStartedApps(cliConnection plugin.CliConnection) ([]GetAppsModel, error) {
	fake.getStartedAppsMutex.Lock()
	fake.getStartedAppsArgsForCall = append(fake.getStartedAppsArgsForCall, struct {
		cliConnection plugin.CliConnection
	}{cliConnection})
	fake.recordInvocation("GetStartedApps", []interface{}{cliConnection})
	fake.getStartedAppsMutex.Unlock()
	if fake.GetStartedAppsStub != nil {
		return fake.GetStartedAppsStub(cliConnection)
	} else {
		return fake.getStartedAppsReturns.result1, fake.getStartedAppsReturns.result2
	}
}

func (fake *FakeApiClient) GetStartedAppsCallCount() int {
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	return len(fake.getStartedAppsArgsForCall)
}

func (fake *FakeApiClient) GetStartedAppsArgsForCall(i int) plugin.CliConnection {
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	return fake.getStartedAppsArgsForCall[i].cliConnection
}

func (fake *FakeApiClient) GetStartedAppsReturns(result1 []GetAppsModel, result2 error) {
	fake.GetStartedAppsStub = nil
	fake.getStartedAppsReturns = struct {
		result1 []GetAppsModel
		result2 error
	}{result1, result2}
}

func (fake *FakeApiClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeApiClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfmysql.ApiClient = new(FakeApiClient)
