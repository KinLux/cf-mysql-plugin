// This file was generated by counterfeiter
package cfmysqlfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin"
	"github.com/andreasf/cf-mysql-plugin/cfmysql"
)

type FakeApiClient struct {
	GetMysqlServicesStub        func(cliConnection plugin.CliConnection) ([]cfmysql.MysqlService, error)
	getMysqlServicesMutex       sync.RWMutex
	getMysqlServicesArgsForCall []struct {
		cliConnection plugin.CliConnection
	}
	getMysqlServicesReturns struct {
		result1 []cfmysql.MysqlService
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApiClient) GetMysqlServices(cliConnection plugin.CliConnection) ([]cfmysql.MysqlService, error) {
	fake.getMysqlServicesMutex.Lock()
	fake.getMysqlServicesArgsForCall = append(fake.getMysqlServicesArgsForCall, struct {
		cliConnection plugin.CliConnection
	}{cliConnection})
	fake.recordInvocation("GetMysqlServices", []interface{}{cliConnection})
	fake.getMysqlServicesMutex.Unlock()
	if fake.GetMysqlServicesStub != nil {
		return fake.GetMysqlServicesStub(cliConnection)
	} else {
		return fake.getMysqlServicesReturns.result1, fake.getMysqlServicesReturns.result2
	}
}

func (fake *FakeApiClient) GetMysqlServicesCallCount() int {
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	return len(fake.getMysqlServicesArgsForCall)
}

func (fake *FakeApiClient) GetMysqlServicesArgsForCall(i int) plugin.CliConnection {
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	return fake.getMysqlServicesArgsForCall[i].cliConnection
}

func (fake *FakeApiClient) GetMysqlServicesReturns(result1 []cfmysql.MysqlService, result2 error) {
	fake.GetMysqlServicesStub = nil
	fake.getMysqlServicesReturns = struct {
		result1 []cfmysql.MysqlService
		result2 error
	}{result1, result2}
}

func (fake *FakeApiClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeApiClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfmysql.ApiClient = new(FakeApiClient)
