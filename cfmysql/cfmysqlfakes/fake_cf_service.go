// Code generated by counterfeiter. DO NOT EDIT.
package cfmysqlfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin"
	sdkModels "code.cloudfoundry.org/cli/plugin/models"
	"github.com/andreasf/cf-mysql-plugin/cfmysql"
)

type FakeCfService struct {
	GetMysqlServicesStub        func(cliConnection plugin.CliConnection) ([]cfmysql.MysqlService, error)
	getMysqlServicesMutex       sync.RWMutex
	getMysqlServicesArgsForCall []struct {
		cliConnection plugin.CliConnection
	}
	getMysqlServicesReturns struct {
		result1 []cfmysql.MysqlService
		result2 error
	}
	getMysqlServicesReturnsOnCall map[int]struct {
		result1 []cfmysql.MysqlService
		result2 error
	}
	GetStartedAppsStub        func(cliConnection plugin.CliConnection) ([]sdkModels.GetAppsModel, error)
	getStartedAppsMutex       sync.RWMutex
	getStartedAppsArgsForCall []struct {
		cliConnection plugin.CliConnection
	}
	getStartedAppsReturns struct {
		result1 []sdkModels.GetAppsModel
		result2 error
	}
	getStartedAppsReturnsOnCall map[int]struct {
		result1 []sdkModels.GetAppsModel
		result2 error
	}
	OpenSshTunnelStub        func(cliConnection plugin.CliConnection, toService cfmysql.MysqlService, apps []sdkModels.GetAppsModel, localPort int)
	openSshTunnelMutex       sync.RWMutex
	openSshTunnelArgsForCall []struct {
		cliConnection plugin.CliConnection
		toService     cfmysql.MysqlService
		apps          []sdkModels.GetAppsModel
		localPort     int
	}
	GetServiceStub        func(connection plugin.CliConnection, name string) (cfmysql.MysqlService, error)
	getServiceMutex       sync.RWMutex
	getServiceArgsForCall []struct {
		connection plugin.CliConnection
		name       string
	}
	getServiceReturns struct {
		result1 cfmysql.MysqlService
		result2 error
	}
	getServiceReturnsOnCall map[int]struct {
		result1 cfmysql.MysqlService
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfService) GetMysqlServices(cliConnection plugin.CliConnection) ([]cfmysql.MysqlService, error) {
	fake.getMysqlServicesMutex.Lock()
	ret, specificReturn := fake.getMysqlServicesReturnsOnCall[len(fake.getMysqlServicesArgsForCall)]
	fake.getMysqlServicesArgsForCall = append(fake.getMysqlServicesArgsForCall, struct {
		cliConnection plugin.CliConnection
	}{cliConnection})
	fake.recordInvocation("GetMysqlServices", []interface{}{cliConnection})
	fake.getMysqlServicesMutex.Unlock()
	if fake.GetMysqlServicesStub != nil {
		return fake.GetMysqlServicesStub(cliConnection)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getMysqlServicesReturns.result1, fake.getMysqlServicesReturns.result2
}

func (fake *FakeCfService) GetMysqlServicesCallCount() int {
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	return len(fake.getMysqlServicesArgsForCall)
}

func (fake *FakeCfService) GetMysqlServicesArgsForCall(i int) plugin.CliConnection {
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	return fake.getMysqlServicesArgsForCall[i].cliConnection
}

func (fake *FakeCfService) GetMysqlServicesReturns(result1 []cfmysql.MysqlService, result2 error) {
	fake.GetMysqlServicesStub = nil
	fake.getMysqlServicesReturns = struct {
		result1 []cfmysql.MysqlService
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) GetMysqlServicesReturnsOnCall(i int, result1 []cfmysql.MysqlService, result2 error) {
	fake.GetMysqlServicesStub = nil
	if fake.getMysqlServicesReturnsOnCall == nil {
		fake.getMysqlServicesReturnsOnCall = make(map[int]struct {
			result1 []cfmysql.MysqlService
			result2 error
		})
	}
	fake.getMysqlServicesReturnsOnCall[i] = struct {
		result1 []cfmysql.MysqlService
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) GetStartedApps(cliConnection plugin.CliConnection) ([]sdkModels.GetAppsModel, error) {
	fake.getStartedAppsMutex.Lock()
	ret, specificReturn := fake.getStartedAppsReturnsOnCall[len(fake.getStartedAppsArgsForCall)]
	fake.getStartedAppsArgsForCall = append(fake.getStartedAppsArgsForCall, struct {
		cliConnection plugin.CliConnection
	}{cliConnection})
	fake.recordInvocation("GetStartedApps", []interface{}{cliConnection})
	fake.getStartedAppsMutex.Unlock()
	if fake.GetStartedAppsStub != nil {
		return fake.GetStartedAppsStub(cliConnection)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStartedAppsReturns.result1, fake.getStartedAppsReturns.result2
}

func (fake *FakeCfService) GetStartedAppsCallCount() int {
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	return len(fake.getStartedAppsArgsForCall)
}

func (fake *FakeCfService) GetStartedAppsArgsForCall(i int) plugin.CliConnection {
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	return fake.getStartedAppsArgsForCall[i].cliConnection
}

func (fake *FakeCfService) GetStartedAppsReturns(result1 []sdkModels.GetAppsModel, result2 error) {
	fake.GetStartedAppsStub = nil
	fake.getStartedAppsReturns = struct {
		result1 []sdkModels.GetAppsModel
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) GetStartedAppsReturnsOnCall(i int, result1 []sdkModels.GetAppsModel, result2 error) {
	fake.GetStartedAppsStub = nil
	if fake.getStartedAppsReturnsOnCall == nil {
		fake.getStartedAppsReturnsOnCall = make(map[int]struct {
			result1 []sdkModels.GetAppsModel
			result2 error
		})
	}
	fake.getStartedAppsReturnsOnCall[i] = struct {
		result1 []sdkModels.GetAppsModel
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) OpenSshTunnel(cliConnection plugin.CliConnection, toService cfmysql.MysqlService, apps []sdkModels.GetAppsModel, localPort int) {
	var appsCopy []sdkModels.GetAppsModel
	if apps != nil {
		appsCopy = make([]sdkModels.GetAppsModel, len(apps))
		copy(appsCopy, apps)
	}
	fake.openSshTunnelMutex.Lock()
	fake.openSshTunnelArgsForCall = append(fake.openSshTunnelArgsForCall, struct {
		cliConnection plugin.CliConnection
		toService     cfmysql.MysqlService
		apps          []sdkModels.GetAppsModel
		localPort     int
	}{cliConnection, toService, appsCopy, localPort})
	fake.recordInvocation("OpenSshTunnel", []interface{}{cliConnection, toService, appsCopy, localPort})
	fake.openSshTunnelMutex.Unlock()
	if fake.OpenSshTunnelStub != nil {
		fake.OpenSshTunnelStub(cliConnection, toService, apps, localPort)
	}
}

func (fake *FakeCfService) OpenSshTunnelCallCount() int {
	fake.openSshTunnelMutex.RLock()
	defer fake.openSshTunnelMutex.RUnlock()
	return len(fake.openSshTunnelArgsForCall)
}

func (fake *FakeCfService) OpenSshTunnelArgsForCall(i int) (plugin.CliConnection, cfmysql.MysqlService, []sdkModels.GetAppsModel, int) {
	fake.openSshTunnelMutex.RLock()
	defer fake.openSshTunnelMutex.RUnlock()
	return fake.openSshTunnelArgsForCall[i].cliConnection, fake.openSshTunnelArgsForCall[i].toService, fake.openSshTunnelArgsForCall[i].apps, fake.openSshTunnelArgsForCall[i].localPort
}

func (fake *FakeCfService) GetService(connection plugin.CliConnection, name string) (cfmysql.MysqlService, error) {
	fake.getServiceMutex.Lock()
	ret, specificReturn := fake.getServiceReturnsOnCall[len(fake.getServiceArgsForCall)]
	fake.getServiceArgsForCall = append(fake.getServiceArgsForCall, struct {
		connection plugin.CliConnection
		name       string
	}{connection, name})
	fake.recordInvocation("GetService", []interface{}{connection, name})
	fake.getServiceMutex.Unlock()
	if fake.GetServiceStub != nil {
		return fake.GetServiceStub(connection, name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceReturns.result1, fake.getServiceReturns.result2
}

func (fake *FakeCfService) GetServiceCallCount() int {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return len(fake.getServiceArgsForCall)
}

func (fake *FakeCfService) GetServiceArgsForCall(i int) (plugin.CliConnection, string) {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return fake.getServiceArgsForCall[i].connection, fake.getServiceArgsForCall[i].name
}

func (fake *FakeCfService) GetServiceReturns(result1 cfmysql.MysqlService, result2 error) {
	fake.GetServiceStub = nil
	fake.getServiceReturns = struct {
		result1 cfmysql.MysqlService
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) GetServiceReturnsOnCall(i int, result1 cfmysql.MysqlService, result2 error) {
	fake.GetServiceStub = nil
	if fake.getServiceReturnsOnCall == nil {
		fake.getServiceReturnsOnCall = make(map[int]struct {
			result1 cfmysql.MysqlService
			result2 error
		})
	}
	fake.getServiceReturnsOnCall[i] = struct {
		result1 cfmysql.MysqlService
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMysqlServicesMutex.RLock()
	defer fake.getMysqlServicesMutex.RUnlock()
	fake.getStartedAppsMutex.RLock()
	defer fake.getStartedAppsMutex.RUnlock()
	fake.openSshTunnelMutex.RLock()
	defer fake.openSshTunnelMutex.RUnlock()
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfmysql.CfService = new(FakeCfService)
