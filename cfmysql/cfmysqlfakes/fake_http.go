// This file was generated by counterfeiter
package cfmysqlfakes

import (
	"sync"

	"github.com/andreasf/cf-mysql-plugin/cfmysql"
)

type FakeHttp struct {
	GetStub        func(endpoint string, access_token string, skipSsl bool) ([]byte, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		endpoint     string
		access_token string
		skipSsl      bool
	}
	getReturns struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttp) Get(endpoint string, access_token string, skipSsl bool) ([]byte, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		endpoint     string
		access_token string
		skipSsl      bool
	}{endpoint, access_token, skipSsl})
	fake.recordInvocation("Get", []interface{}{endpoint, access_token})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(endpoint, access_token, skipSsl)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeHttp) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeHttp) GetArgsForCall(i int) (string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].endpoint, fake.getArgsForCall[i].access_token
}

func (fake *FakeHttp) GetReturns(result1 []byte, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHttp) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHttp) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfmysql.Http = new(FakeHttp)
